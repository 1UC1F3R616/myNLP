# -*- coding: utf-8 -*-
"""LiveTwitterSentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mBpgx1K56G-xvu7usdyUAsX3y7T4Hymd

# Live Twitter Sentiment Analysis
- Data Mining Technique
- Social Media
- Represents the general public's sentiments

### Steps
- Installig Tweepy
- Creating Account and Twitter API
- Importing the libraries
- Connecting the Libraries
- Connecting with the Twitter API
- Iterate and Analyse the tweets data
- Print the result using Pie Chart
"""

!pip install tweepy

!pip install textblob

from textblob import TextBlob
import sys
import tweepy
import matplotlib.pyplot as plt

def percentage(part, whole):
  return 100 * float(part)/float(whole)

# Connecting with the Twitter API
from getpass import getpass
access_token = getpass('Enter the Twitter Access Token')
access_token_secret = getpass('Enter the Twitter Access Token Secret')

API_KEY = getpass('Enter the Twitter API KEY')
API_SECRET_KEY = getpass('Enter the Twitter API KEY SECRET')

auth = tweepy.OAuthHandler(API_KEY, API_SECRET_KEY)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

searchTerm = input('Enter Keyword/Tag to search about: ')
NoOfTerms = int(input('Enter how many tweets to search: '))
tweets = tweepy.Cursor(api.search, q=searchTerm).items(NoOfTerms)

# Iterate and Analyse the tweets
a = TextBlob('I am a funny Cricket player')
a.sentiment.polarity

positive = 0
negative = 0
neutral = 0
polarity = 0

for tweet in tweets:
  analysis = TextBlob(tweet.text)
  sentiment = analysis.sentiment.polarity
  polarity += sentiment

  if sentiment < 0:
    negative += 1
  elif sentiment == 0:
    neutral += 1
  elif sentiment > 0:
    positive += 1

positivePercentage = float(format(percentage(positive, NoOfTerms), '.2f'))
negativePercentage = float(format(percentage(negative, NoOfTerms), '.2f'))
neutralPercentage  = float(format(percentage(neutral, NoOfTerms), '.2f'))
polarityPercentage = float(format(percentage(polarity, NoOfTerms), '.2f'))

print(type(positivePercentage))
print(positivePercentage)

print('How People are Reacting on '+ searchTerm + 'By Analyzing ' + str(NoOfTerms) + ' Tweets')

if polarityPercentage < 0.00:
  print('Negative')
elif polarityPercentage == 0:
  print('Neutral')
elif polarityPercentage > 0.00:
  print('Positive')

print('Polarity: ' + str(polarityPercentage))

labels = ['Positive [{}%]'.format(positivePercentage),
  'Neutral [{}%]'.format(neutralPercentage),
  'Negative [{}%]'.format(negativePercentage)
]

sizes = [positivePercentage, neutralPercentage, negativePercentage]
colors = ['green', 'blue', 'red']
patches, texts = plt.pie(sizes, colors = colors, startangle=90)
plt.legend(patches, labels, loc='best')
plt.title('Hoe people are reacting on {} by analyzing {} Tweets'.format(searchTerm, NoOfTerms))
plt.axis('equal')
plt.tight_layout()
plt.show()